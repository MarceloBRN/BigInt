#include <iostream>
#include "BigInt.h"

int main() {

	bnum::BigInt base;
	bnum::BigInt exponent;
	bnum::BigInt res;

	base = BIGINT(2);
	exponent = BIGINT(10);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "1024") {
		std::cout << "(WRONG)";
	}
	std::cout << "power1: " << res << std::endl;

	base = BIGINT(10);
	res = bnum::powi(60, 10);
	if (res.to_string() != "604661760000000000") {
		std::cout << "(WRONG)";
	}
	std::cout << "power2: " << res << std::endl;

	base = BIGINT(99999999999);
	exponent = BIGINT(999);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "999999990010000049850099834331501412514561689096021965064257268344560416261495416087965588052517904896611299157463863136914177561381864092663211940856816458494208615157414049083709203538762162722616879580362130094128457888223194313753216705440641598785374415746245156932344826230952008859881176121197411082302782621280015711273911673506509942338548056185059350910193976906596862363554044466559657821561356330648598788784833022701457491632203872694892374725229498903451804885464073862846029143699176563105427648634391929861767510035588559739319306190865327162382537981198817768709073278660395440240648717983865547416896530529736641618477570154943014584302243898097970976183566653402737917715439133922157206384008029881007670895266763729458137530949674218878480014033928731706810487799856313682841753196528754231673177381347088530282769371139901505801739972467525557094486377242964746939062331190939555676731943885570690161191204275434153553971747934041192879772644553262136771310248648822183239892964663040351871411172258087520049735370331603133848323129416239522587368330709234542233635950869234636931613309115755389193638335202015468584850421250378257822904554331384865679993955534461743816855198601787524706200885508619442348354281287275004435032453007910853893680895333668361139492150134198884437510320925434113256516721428305128154012627127122670218695422088693628731777118379346765405136060759240651957047530318830689308226102121071486800945744175071767089468565297878398401858749073365485116531088299742174845975582807380765559588984831563721550171656071816674316554963272972089320110909668540862613785232976374650321629859720379542082713481823107747415117885898959919005460709654221508417498850843351383707257523961372964556388994962688609620964022439304088334933038431697130503409137767230872020228528532542368871298092289259616759757480542121254848956717835151891661476631437625145900197069476534342300657813223605934011599503968740839409898010947300896982246602930485153251927675897118242965105908004787554953093559843974237332902902450698950767633220747496129732576962120332816269175155688715536789304437754198028076978262764892564165174367871389152125486372036132933604863449740821335255843698744121085491546683346377535510487658236789618125485452725621271454603276628076317561680025131767890371944393063425271416773325202267440134492712949027766615364009036535273186351909575684749249931716842482565347816007861818273072699955184405260512023741898253628091803592741268753731281903109598336180173639311754022827079942908768187266945137304344997732181974853920337979950125887756614994967132369497609944786441446718449277166417336864128213534599566426422531358541351751456131854660917501793682753609813890445588518141495696055044810991713016980445422653825942540858232009230496618301673505584822105032317790616472486071278962710987908411507802996040857501643548801713518086306120319896908756703891019555552310160845053010113238643195073127383392345119912876523214647556921379515831325714260815089286650185656141255573385120549276164560690123756360420092762237011071485626308008099338075539814876170407957644881578268280784731195854282442171692882870263748072082346417555399291370324445732610189766439042857092395398173935659490864773319480235952031607754933419884695711986059765078913017708468444864602730645841502312479300347472594985415166626560368604320989111926884324150572325030272860681575194640725108520422740042019081284535738367695756562902840779858977918744532413643140778171937152141704497598505706422416705913754449242617481033744107490962043276553578755287066672770052388373236684973447968744810095279411787688479523762338485885234317829929071661292551868741404771721157779030711503375897757972715284844231566054370753211134914777658490106549343839094055607139559568457618443865791662023534639623994484687945773440638439572580060191342408139272562371139323032914164969110428937821035736158111137255393417965609965669433636404063186411621579871666973880090474802681185977027669961819837789740507115812684974403283877543566140022344228840846991411475091083289947734476266816710519749964996296871012945185188005831613632346807163637848691579085859699397414118154109449319230977635847362364023826902535288420540215864806908294848049489419460582094043219356780606951623496862772710968771125569000546087210548925324592089478388609620731180683533027646437238013411817796499361186544901868819169983735478566013082021521121330564124720907219475220913030491995346132764636631508724004299052789974027344247497623998758163140691877667317174966666095727093012325459094984664595393860343573724162900864761313102209173513890051799276328073824002652821274884571286579907790148977036025732390203081189060860341421602274849470549727747690795989146363674689968867962745634697095469799332577273677571244579413333493778277731939115527135677730772447913124700315621450088417215308145035033245745675944425543945325407562255352692321640537093625005328629873760006405498983696170478310095972191273169412551836989349743050732962219133702948927594927254941991243562000236235477273902811947439348121069026876322165944370537188899074191610186512017066731848881596423867749569706939297859327747023222336678633851845839696155739323265101068032621010838152028251750736843352112684351016473413882893084049844391517196468127018664486997164161705187017086005589847606636877123186918367167669351517101331043729970510697067125899632544356370370385583585596953303767890410541369375675061974948156758066975355309476751077302969486758593486858397178821942435930508055350238995784214712697742537210598361098737124869165758817679701661590379385337426466976847450560827386844411081000659396354311396197803138804171746673501421002134153835902645568573376981756514367294562247025665274108473447120317310712253765298790498721420625223762184378359138523828325945094816079784826771485474687328590835197917807397255307670167704429957963314941797663733427658790520946369964399922139289294695059194950263238075123875147186025655475662376830205093217338561098242725942521226192116128869393067955302100336511018934555502175283762099971455871926265760318816171145462906005677044459693202422171265606848808299329434580633197348532559946237258544400578577130908408066391192660481914221185971731026569586688560792263220683769052942503008629209260657795013184453222460553860767654342616661379248685093730645741763487003676407505808966131355231611256508411465813531915219986471465540557058793604650909955537860158774125523777135863509208026135733413599428863063196643686630827373582814567919853625405404185673735172043121421662673756557699087287440749499433458043757892540737326186419535748947823889681707756351609060792234783115983173798403547665148008503582752347000918653027029836141208497891827529067415780748895777474513052816745975553957625466226759913204725621077730943666724933180368921601198376814951303598430758048294300633832204461742646342688001063768824565875050781319464217085893481124907872745372988257342226201065209773166913321281508741508087397709906562938023288023719911576801431631971669234313985459909657412833151822019432746644565063593451538320009588762130629695618157226407165681097992654818091975925516000104211788690185797566856201796146738739061751391030831190646291291175377773320227690271148542814312508243043035025723942872438479720489809674037873823911767820481728816657927811853704169288257432374222603903541768399181992862010962378309430353764143798514431208982079130440807180590511770593268136329223717283393863838574981717821359706710139069323937704057260879076185183753859738078508345679575462270432834620016431917952962571531737171586700259353574403708008704268840243596682395254573655989817230017896480034695927358082959103909465157029399519919052951708427604290451234432278132345542310114983483772981340679476523256888519923887947236623299537940696871855385416737381332108540118629061097273621232204199230669284271221173441355269948625666607094853940560830782556253337870736462925045221953403685745307114148675090849255377020086514396570954536374536537539634348845120813804985770142518718738141109948575492642361613332000387717042011983487676721549654549855000739588295801539237984220937468293626478017270375662285294275009161937633767650142993470738816523725841305325558539916568099508513981011462031020268890747638068389887984630107846157286876937482803166417609501970150155708026332452679580696557957784269674529864707295569981300733734179867307797807654499554821430478872007502590423115384850658640473484783856246683317858384574019741669376961380962341641468468416959541218084439306743770514622809153537577904021380757967829357189472064714961043158743221691598847642707688542102233404479046370688615146360602331138938417053014226902652119799564578850707107484777587157114818113951492056191612016986178373159468125782395027055264853195650796661186207580575447697744756655724780145092845383863865355202605174055583983654072097034361181581675359428795568234619352418852340827526238944390137634566572316610075647082557000673176063797130549069213202707867342969132658462293920012292525353488774636412130544660324148588739218073355784857982369922823608948662778307454903861205584595041029024294850097814761761157503281445185289369758065128325597800380878023322358976282815259617222605174549228531156822890246117634822820245055103871308787023382769996009881425310216944339069525136142338756976135317868216239510598040724900112462687745856956978264568777297450053766286895540485431009072921837237729129695326464269479894884209837945094423529988136206758138744753970779277019707485957716859822016314985209702873915577572179730455433162928795485119640265263129678598901025335251169169678369766956330455231366242522568957666661121511099515757474430066748993287346005016847518840733550862276049863330018583203472172278649811386023243438071163991044929217682898474181767186468947224456701578564588136580758815452061474865702790149510438909651066666890729654649220075730396358763949215866604446063290751489021560986327744602757249752810841302633400824854062215281278152582665179008282856004960541844036021356656254786231927330060154665232641925200921326387367004207653962535031608276804159738052907942024403478160059976184123162560639015752236238074549984980512286213424470362862100904076186963976713557194645115113720257001582670782206219743728850565409196751584577171702885369272542820066793091160950948357555366663227035700588564417172752506993367157333458314361743430349372433749630949987415045291026622607560896197099944264508497342497065232116628823589718683349120026737072491650239829860503866254263352498856505575995372914151948880944342694112563154861206685890447640406825904290129000467971028298992333279317492597432354228947851809118774809909048583801601661604768313892554103046219395341533518221771475440403482221370715262392431245167123982775809652097608895633507583025197019462906725195000935304419758184935740802531090397939485874854374900165668498999995014990000000099899999999999") {
		std::cout << "(WRONG)";
	}
	std::cout << "power3: " << res << std::endl;

	base = BIGINT(1847102741984197);
	exponent = BIGINT(1);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "1847102741984197") {
		std::cout << "(WRONG)";
	}
	std::cout << "power4: " << res << std::endl;


	base = BIGINT(-18493820740123841023784127184197);
	exponent = BIGINT(40);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "479806081768548260986175826341194899767516215372555253584688140589300423743346909715294049748149460642313505380406090516633691580557315079326329662358553349455109253936490453201903808970148380539160009820480825339017898660308515018262692673746030429171158772936481160191079212732987413307450749836876354315851014330999980301634369406239114175920443833995748137359327528160612599049359847598898422242110010183743910783163915215805008342195371723569554922798189885069563906606537076022225317073044694691500566976635607330406076493461120000197574404865555674130403527712670951188227648943705091314367172819553818143867761880133816963080987140836048094056775532727533875014460472192371486582859661944599238964443363841393993687031849958251055943878955003560658366442957112130251469929104497821977487531820835859466148535705305945555875017043056466373482603675133872188795681891469273322419277936005154376426580117903084223016214726849121902054359943849008960389293302049241188382263137189668322550180561090520368920548172365755038374121237875889635914273869007491582140727478516244123025294477899739169827039923928258176235701428530589383547909367074282308632460738076041196570388671661704173905575195616497684467450455373481427449205554136648376850472801") {
		std::cout << "(WRONG)";
	}
	std::cout << "power5: " << res << std::endl;

	base = BIGINT(-18493820740123841023784127184197);
	exponent = BIGINT(27);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "-16207625019596668110312678816703361460134384525175063275983160515776890167475157926647847252152331680001287139530648784314898818681861426081748988324588523846168727704161464654761633727786915061756741432803552379707765244470092111202544688808786163936939516028433364594909945462667181794673564076822954082539959722312305178434605733788140378377264275501072531733232422248031596323573588304140037216615235047764231823842954215250393156367288808592248432344993902259847339907543406666739399746677089644123255602524572249590573183729895090598949190052851941741281426116592193925773644402601605950800074517103706843515837646855746969758263629679642387496142762090431502052070596081499501171460726548651287453349887547738580665441219743448175450586418336659785294362269050938728313615938954028845813485060224841606967347584780336677690895425882443613") {
		std::cout << "(WRONG)";
	}
	std::cout << "power6: " << res << std::endl;


	base = BIGINT(0);
	exponent = BIGINT(1);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "0") {
		std::cout << "(WRONG)";
	}
	std::cout << "power7: " << res << std::endl;

	res = bnum::powi(base, exponent);
	if (res.to_string() != "0") {
		std::cout << "(WRONG)";
	}
	std::cout << "power8: " << res << std::endl;

	base = BIGINT(1);
	exponent = BIGINT(0);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "1") {
		std::cout << "(WRONG)";
	}
	std::cout << "power9: " << res << std::endl;

	base = BIGINT(-1);
	exponent = BIGINT(1);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "-1") {
		std::cout << "(WRONG)";
	}
	std::cout << "power10: " << res << std::endl;

	base = BIGINT(-1);
	exponent = BIGINT(0);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "1") {
		std::cout << "(WRONG)";
	}
	std::cout << "power11: " << res << std::endl;

	base = BIGINT(0);
	exponent = BIGINT(0);
	res = bnum::powi(base, exponent);
	if (res.to_string() != "1") {
		std::cout << "(WRONG)";
	}
	std::cout << "power12: " << res << std::endl;

	return 0;
}